shiny::runApp()
gwpoints
library(shiny)
library(jsonlite)
library(curl)
library(data.table)
library(dplyr)
library(ggplot2)
library(DT)
library(shinydashboard)
scorelist <- list()
ffdata <- fromJSON('https://fantasy.premierleague.com/drf/bootstrap-static')
homeTeamsStarted <- ffdata$next_event_fixtures[,c('team_h','started')]
awayTeamsStarted <- ffdata$next_event_fixtures[,c('team_a','started')]
names(homeTeamsStarted) <- c("id","started")
names(awayTeamsStarted) <- c("id","started")
teamsStarted <- rbind(homeTeamsStarted,awayTeamsStarted)
teamsStarted<- merge(teamsStarted,ffdata$teams,by="id")[,c('code','started')]
names(teamsStarted) <- c("team_code","started")
players_noteam <- ffdata$elements[,c("id","web_name","element_type","team_code","event_points","total_points","news","points_per_game")]
teams <- ffdata$teams[,c("name","code")]
colnames(teams) <- c("name","team_code")
players <- (merge(players_noteam, teams, by = 'team_code'))
players <- (merge(players,teamsStarted, by = 'team_code'))
players <- players[ , !(names(players) == 'team_code')]
players$element_type <- recode(players$element_type, "1" = "GK", "2" = "Def", "3" = "Mid", "4" = "Atk")
ppg<- players[,c("web_name","element_type","name","points_per_game")]
players <- players[,c(1,2,3,8,4,5,6,9)] #reorder columns
picks <- read.csv("www/picks.csv")
playerscopy <- players
players <- merge(players,picks,by='id')
notpicked <- subset(playerscopy, !(id %in% players$id))
names(notpicked) <- c("id","Name","Position","Team","GW points","Total points","News")
names(playerscopy) <- c("id","Name","Position","Team","GW points","Total points","News")
colnames(players) <- c("id","Name","Position","Team","GW points","Total points","News","Team started","Picked by")
names(ppg) <- c("Name","Position","Team","PPG")
ppg$PPG <- as.numeric(ppg$PPG)
for(i in 1:nrow(players)){
individual <- fromJSON(paste0("https://fantasy.premierleague.com/drf/element-summary/",players[i,]$id))
roundscores <- transpose(individual$history[,c("round","total_points")])
minsplayed <- individual$history[individual$history$round==max(individual$history$round),][,c("minutes")]
names(roundscores) <- c(roundscores[1,])
temp <- names(roundscores) #store names for reassignment
roundscores <- data.frame(roundscores[2,])
names(roundscores) <- temp
player_with_scores <- cbind(players[i,],roundscores)
player_with_scores$`GW minutes` <- minsplayed
player_with_scores <- player_with_scores[,c(1:5,ncol(player_with_scores),6:(ncol(player_with_scores)-1))]
scorelist[[i]] <- player_with_scores
}
allplayers <- dplyr::bind_rows(scorelist)
#e<- names(allplayers)
#e[10:47] <- c(1:38)
#allplayers <- allplayers[,e] #put in right order after bind_rows puts NA values at end
finaldf <- split(allplayers,allplayers$`Picked by`)
gameweekpoints <- data.frame(Player=character(),Week=character(),Points=integer())
assign("Tom",finaldf$Tom)
assign("Warnes",finaldf$Warnes)
assign("David",finaldf$David)
assign("Hodge",finaldf$Hodge)
assign("Luke",finaldf$Luke)
for(q in c("Tom","Warnes","David","Hodge","Luke")){
gwscores<-apply(get(q)[11:ncol(get(q))],2,function(x) sum(head(sort(x, decreasing=TRUE), 20))) #change 2 to number of scored players
assign(paste0("gwpoints",q),data.frame(q,names(gwscores),gwscores))
assign(paste0("gwpoints",q),get(paste0("gwpoints",q)) %>%
group_by(q) %>%
mutate(cumsum = cumsum(gwscores)))
}
gameweekpoints<- dplyr::bind_rows(gwpointsTom,gwpointsWarnes,gwpointsDavid,gwpointsHodge,gwpointsLuke)
names(gameweekpoints) <- c("Player","Week","Points","Cumulative") #create frame of gameweeks and how many points scored
gameweekpoints$Week <- as.double(levels(gameweekpoints$Week))[gameweekpoints$Week] #convert weeknumber from Factor to Numeric
names(Tom)
runApp()
ffdata$`current-event`
ffdata$next_event_fixtures
ffdata$`current-event`
unique(ffdata$next_event_fixtures$event)
runApp()
runApp()
Tom
runApp()
